// <auto-generated />
using System;
using MaxemusAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaxemusAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240723080657_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MaxemusAPI.Models.AccessoriesVariants", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessoryId"), 1L, 1);

                    b.HasKey("ProductId")
                        .HasName("PK__Accessor__B40CC6CD9336DC1D");

                    b.ToTable("AccessoriesVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MaxemusAPI.Models.AudioVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("AudioCompression")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BuiltInMic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VariantId")
                        .HasName("PK__AudioVar__0EA233844755CD2D");

                    b.HasIndex("ProductId");

                    b.ToTable("AudioVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerId"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerId");

                    b.ToTable("Banner");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CameraVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"), 1L, 1);

                    b.Property<string>("Appearance")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EffectivePixels")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ElectronicShutterSpeed")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageSensor")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Irdistance")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IRDistance");

                    b.Property<string>("IrledsNumber")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IRLEDsNumber");

                    b.Property<string>("IronOffControl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("IROnOffControl");

                    b.Property<string>("MinIllumination")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PanTiltRotationRange")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Ram")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("RAM");

                    b.Property<string>("Rom")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ROM");

                    b.Property<string>("ScanningSystem")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("VariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("CameraVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CartDetail", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int")
                        .HasColumnName("DistributorID");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductCountInCart")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD797CAAA79D2");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CertificationVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("Certifications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VariantId")
                        .HasName("PK__Certific__0EA23384FA3F3D5A");

                    b.HasIndex("ProductId");

                    b.ToTable("CertificationVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CityMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("CityMaster");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CompanyDetail", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("AboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNameOrNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WhatsappNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ContactUs", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ContactId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CountryMaster", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CountryId");

                    b.ToTable("CountryMaster");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DashboardItem", b =>
                {
                    b.Property<int>("DashboardItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashboardItemId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DashboardItemId");

                    b.ToTable("DashboardItem");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DashboardVideo", b =>
                {
                    b.Property<int>("DashboardVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashboardVideoId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DashboardVideoId");

                    b.ToTable("DashboardVideo");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DealerDetail", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DistributorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DealerId");

                    b.HasIndex("DistributorId");

                    b.ToTable("DealerDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DealerProduct", b =>
                {
                    b.Property<int>("DealerProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int?>("RewardPoint")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DealerProductId");

                    b.HasIndex("DealerId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStockId");

                    b.ToTable("DealerProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingNameOrNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId")
                        .HasName("PK__Distribu__091C2AFB4B1E36ED");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("StateId");

                    b.ToTable("DistributorAddress");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorDetail", b =>
                {
                    b.Property<int>("DistributorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistributorId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistributorCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DistributorId");

                    b.HasIndex("AddressId");

                    b.ToTable("DistributorDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorOrder", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"), 1L, 1);

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("TotalDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalMrp")
                        .HasColumnType("float");

                    b.Property<int?>("TotalProducts")
                        .HasColumnType("int");

                    b.Property<double?>("TotalSellingPrice")
                        .HasColumnType("float");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.ToTable("DistributorOrder");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorOrderedProduct", b =>
                {
                    b.Property<int>("OrderedProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderedProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double?>("SellingPricePerItem")
                        .HasColumnType("float");

                    b.Property<double?>("ShippingCharges")
                        .HasColumnType("float");

                    b.Property<double>("TotalMrp")
                        .HasColumnType("float")
                        .HasColumnName("TotalMRP");

                    b.HasKey("OrderedProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("DistributorOrderedProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.EnvironmentVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("OperatingConditions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Protection")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StorageTemperature")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("VariantId")
                        .HasName("PK__Environm__0EA2338486D2E345");

                    b.HasIndex("ProductId");

                    b.ToTable("EnvironmentVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.GeneralVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("CasingMetalPlastic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GrossWeight")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NetWeight")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VariantId")
                        .HasName("PK__GeneralV__0EA233846EA8F05D");

                    b.HasIndex("ProductId");

                    b.ToTable("GeneralVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.InstallationDocumentVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"), 1L, 1);

                    b.Property<string>("InstallationDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("InstallationDocumentVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.LensVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("CloseFocusDistance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Doridistance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DORIDistance");

                    b.Property<string>("FieldOfView")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FocalLength")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IrisType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LensType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MaxAperture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MountType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VariantId")
                        .HasName("PK__LensVari__0EA2338479929D6B");

                    b.ToTable("LensVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MainCategoryId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainCategoryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainCategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MainCategoryId");

                    b.ToTable("MainCategory");
                });

            modelBuilder.Entity("MaxemusAPI.Models.NetworkVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EdgeStorage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Interoperability")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ManagementSoftware")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Protocol")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserHost")
                        .HasColumnType("int");

                    b.HasKey("VariantId")
                        .HasName("PK__NetworkV__0EA23384394CB684");

                    b.HasIndex("ProductId");

                    b.ToTable("NetworkVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserRole")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("MaxemusAPI.Models.NotificationSent", b =>
                {
                    b.Property<int>("NotificationSentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationSentId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotificationRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationSentId");

                    b.ToTable("NotificationSent");
                });

            modelBuilder.Entity("MaxemusAPI.Models.OderAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("StateId");

                    b.ToTable("OderAddress");
                });

            modelBuilder.Entity("MaxemusAPI.Models.OrderedPoduct", b =>
                {
                    b.Property<int>("OrderedProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderedProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double?>("ShippingCharges")
                        .HasColumnType("float");

                    b.Property<double>("TotalMrp")
                        .HasColumnType("float")
                        .HasColumnName("TotalMRP");

                    b.HasKey("OrderedProductId");

                    b.ToTable("OrderedPoduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.OrderedProductQr", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductStockId")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStockId");

                    b.ToTable("OrderedProductQR", (string)null);
                });

            modelBuilder.Entity("MaxemusAPI.Models.PointDetail", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DealerProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("Points")
                        .HasColumnType("float");

                    b.Property<int?>("RedeemedPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointId");

                    b.ToTable("PointDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Points", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointId"), 1L, 1);

                    b.Property<double?>("ActivePoints")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("RedeemedPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointId")
                        .HasName("PK_Point");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("MaxemusAPI.Models.PowerVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("PowerConsumption")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PowerSupply")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("VariantId")
                        .HasName("PK__PowerVar__0EA23384C9D39BF1");

                    b.ToTable("PowerVariants");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double?>("DistributorDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("DistributorDiscountType")
                        .HasColumnType("int");

                    b.Property<double?>("DistributorSellingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeededPointToRedeem")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("TotalMrp")
                        .HasColumnType("float")
                        .HasColumnName("TotalMRP");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ProductStock", b =>
                {
                    b.Property<int>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStockId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Qrcode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QRCode");

                    b.Property<int>("RewardPoint")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductStockId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("MaxemusAPI.Models.RedeemedProducts", b =>
                {
                    b.Property<int>("ReedemProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReedemProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int?>("ReedemedPoint")
                        .HasColumnType("int");

                    b.Property<int>("RewardProductId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReedemProductId");

                    b.HasIndex("RewardProductId");

                    b.ToTable("RedeemedProducts");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ReedemProducts", b =>
                {
                    b.Property<int>("ReedemProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReedemProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int?>("ReedemedPoint")
                        .HasColumnType("int");

                    b.Property<int>("RewardProductId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReedemProductId");

                    b.HasIndex("RewardProductId");

                    b.ToTable("ReedemProducts");
                });

            modelBuilder.Entity("MaxemusAPI.Models.RewardProduct", b =>
                {
                    b.Property<int>("RewardProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("Mrp")
                        .HasColumnType("float")
                        .HasColumnName("MRP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeededPointToRedeem")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("RewardProductId");

                    b.ToTable("RewardProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.SmartEvent", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("GeneralIvsanalytics")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GeneralIVSAnalytics");

                    b.HasKey("VariantId")
                        .HasName("PK__SmartEve__0EA2338408DBD89D");

                    b.ToTable("SmartEvent");
                });

            modelBuilder.Entity("MaxemusAPI.Models.StateMaster", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StateId");

                    b.ToTable("StateMaster");
                });

            modelBuilder.Entity("MaxemusAPI.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SubCategoryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserDetail", b =>
                {
                    b.Property<int>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDetailId"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserDetailId");

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserManual", b =>
                {
                    b.Property<int>("MannualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MannualId"), 1L, 1);

                    b.Property<string>("Mannual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("MannualId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserManual");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserOrder", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"), 1L, 1);

                    b.Property<string>("CancelledBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("TotalDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalMrp")
                        .HasColumnType("float");

                    b.Property<int?>("TotalProducts")
                        .HasColumnType("int");

                    b.Property<double?>("TotalSellingPrice")
                        .HasColumnType("float");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.ToTable("UserOrder");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserOrderedProduct", b =>
                {
                    b.Property<int>("OrderedProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderedProductId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double?>("SellingPricePerItem")
                        .HasColumnType("float");

                    b.Property<double?>("ShippingCharges")
                        .HasColumnType("float");

                    b.Property<double>("TotalMrp")
                        .HasColumnType("float")
                        .HasColumnName("TotalMRP");

                    b.HasKey("OrderedProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserOrderedProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.VideoVariants", b =>
                {
                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<string>("BitRateControl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Blc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BLC");

                    b.Property<string>("Compression")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DayNight")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GainControl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Hlc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("HLC");

                    b.Property<string>("ImageRotation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Mirror")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MotionDetection")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoiseReduction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrivacyMasking")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RegionOfInterest")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SmartCodec")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SmartIr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SmartIR");

                    b.Property<string>("StreamCapability")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VideoBitRate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VideoFrameRate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Wdr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WDR");

                    b.Property<string>("WhiteBalance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VariantId");

                    b.ToTable("VideoVariants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MaxemusAPI.Models.AccessoriesVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithOne("AccessoriesVariants")
                        .HasForeignKey("MaxemusAPI.Models.AccessoriesVariants", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AccessoriesVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.AudioVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("AudioVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_AudioVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CameraVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("CameraVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CameraVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CartDetail", b =>
                {
                    b.HasOne("MaxemusAPI.Models.DistributorDetail", "Distributor")
                        .WithMany("CartDetail")
                        .HasForeignKey("DistributorId")
                        .HasConstraintName("FK_CartDetail_DistributorDetail");

                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("CartDetail")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CartDetail_Product");

                    b.Navigation("Distributor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CertificationVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("CertificationVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CertificationVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CityMaster", b =>
                {
                    b.HasOne("MaxemusAPI.Models.StateMaster", "State")
                        .WithMany("CityMaster")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_CityMaster_CityMaster");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DealerDetail", b =>
                {
                    b.HasOne("MaxemusAPI.Models.DistributorDetail", "Distributor")
                        .WithMany("DealerDetail")
                        .HasForeignKey("DistributorId")
                        .HasConstraintName("FK_DealerDetail_DistributorDetail");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DealerProduct", b =>
                {
                    b.HasOne("MaxemusAPI.Models.DealerDetail", "Dealer")
                        .WithMany("DealerProduct")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK_DealerProduct_DealerDetail");

                    b.HasOne("MaxemusAPI.Models.DistributorDetail", "Distributor")
                        .WithMany("DealerProduct")
                        .HasForeignKey("DistributorId")
                        .IsRequired()
                        .HasConstraintName("FK_DealerProduct_DistributorDetail");

                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("DealerProduct")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_DealerProduct_Product");

                    b.HasOne("MaxemusAPI.Models.ProductStock", "ProductStock")
                        .WithMany("DealerProduct")
                        .HasForeignKey("ProductStockId")
                        .IsRequired()
                        .HasConstraintName("FK_DealerProduct_ProductStock");

                    b.Navigation("Dealer");

                    b.Navigation("Distributor");

                    b.Navigation("Product");

                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorAddress", b =>
                {
                    b.HasOne("MaxemusAPI.Models.CountryMaster", "Country")
                        .WithMany("DistributorAddress")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_DistributorAddress_CountryMaster");

                    b.HasOne("MaxemusAPI.Models.DistributorDetail", "Distributor")
                        .WithMany("DistributorAddress")
                        .HasForeignKey("DistributorId")
                        .IsRequired()
                        .HasConstraintName("FK_DistributorAddress_DistributorDetail");

                    b.HasOne("MaxemusAPI.Models.StateMaster", "State")
                        .WithMany("DistributorAddress")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_DistributorAddress_StateMaster");

                    b.Navigation("Country");

                    b.Navigation("Distributor");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorDetail", b =>
                {
                    b.HasOne("MaxemusAPI.Models.DistributorAddress", "Address")
                        .WithMany("DistributorDetail")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_DistributorDetail_DistributorAddress");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorOrderedProduct", b =>
                {
                    b.HasOne("MaxemusAPI.Models.DistributorOrder", "Order")
                        .WithMany("DistributorOrderedProduct")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_DistributorOrderedProduct_DistributorOrder");

                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("DistributorOrderedProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_DistributorOrderedProduct_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.EnvironmentVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("EnvironmentVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_EnvironmentVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.GeneralVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("GeneralVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_GeneralVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.InstallationDocumentVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("InstallationDocumentVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Installat__Produ__19AACF41");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.NetworkVariants", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("NetworkVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkVariants_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.OderAddress", b =>
                {
                    b.HasOne("MaxemusAPI.Models.CountryMaster", "Country")
                        .WithMany("OderAddress")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_OderAddress_CountryMaster");

                    b.HasOne("MaxemusAPI.Models.DistributorDetail", "Distributor")
                        .WithMany("OderAddress")
                        .HasForeignKey("DistributorId")
                        .IsRequired()
                        .HasConstraintName("FK_OderAddress_DistributorDetail");

                    b.HasOne("MaxemusAPI.Models.StateMaster", "State")
                        .WithMany("OderAddress")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_OderAddress_StateMaster");

                    b.Navigation("Country");

                    b.Navigation("Distributor");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MaxemusAPI.Models.OrderedProductQr", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderedProductQR_Product");

                    b.HasOne("MaxemusAPI.Models.ProductStock", "ProductStock")
                        .WithMany()
                        .HasForeignKey("ProductStockId")
                        .HasConstraintName("FK_OrderedProductQR_ProductStock");

                    b.Navigation("Product");

                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Product", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Brand");

                    b.HasOne("MaxemusAPI.Models.MainCategory", "MainCategory")
                        .WithMany("Product")
                        .HasForeignKey("MainCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_MainCategory");

                    b.HasOne("MaxemusAPI.Models.SubCategory", "SubCategory")
                        .WithMany("Product")
                        .HasForeignKey("SubCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_SubCategory");

                    b.Navigation("Brand");

                    b.Navigation("MainCategory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ProductStock", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("ProductStock")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductStock_ProductStock");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.RedeemedProducts", b =>
                {
                    b.HasOne("MaxemusAPI.Models.RewardProduct", "RewardProduct")
                        .WithMany("RedeemedProducts")
                        .HasForeignKey("RewardProductId")
                        .IsRequired()
                        .HasConstraintName("FK_RedeemedProducts_RwardProduct");

                    b.Navigation("RewardProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ReedemProducts", b =>
                {
                    b.HasOne("MaxemusAPI.Models.RewardProduct", "RewardProduct")
                        .WithMany("ReedemProducts")
                        .HasForeignKey("RewardProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ReedemProducts_RewardProduct");

                    b.Navigation("RewardProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.SubCategory", b =>
                {
                    b.HasOne("MaxemusAPI.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategory")
                        .HasForeignKey("MainCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCategory_MainCategory");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserManual", b =>
                {
                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("UserManual")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__UserManua__Produ__6442E2C9");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserOrderedProduct", b =>
                {
                    b.HasOne("MaxemusAPI.Models.UserOrder", "Order")
                        .WithMany("UserOrderedProduct")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_UserOrderedProduct_UserOrder");

                    b.HasOne("MaxemusAPI.Models.Product", "Product")
                        .WithMany("UserOrderedProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_UserOrderedProduct_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MaxemusAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MaxemusAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaxemusAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MaxemusAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaxemusAPI.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.CountryMaster", b =>
                {
                    b.Navigation("DistributorAddress");

                    b.Navigation("OderAddress");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DealerDetail", b =>
                {
                    b.Navigation("DealerProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorAddress", b =>
                {
                    b.Navigation("DistributorDetail");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorDetail", b =>
                {
                    b.Navigation("CartDetail");

                    b.Navigation("DealerDetail");

                    b.Navigation("DealerProduct");

                    b.Navigation("DistributorAddress");

                    b.Navigation("OderAddress");
                });

            modelBuilder.Entity("MaxemusAPI.Models.DistributorOrder", b =>
                {
                    b.Navigation("DistributorOrderedProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.MainCategory", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("MaxemusAPI.Models.Product", b =>
                {
                    b.Navigation("AccessoriesVariants")
                        .IsRequired();

                    b.Navigation("AudioVariants");

                    b.Navigation("CameraVariants");

                    b.Navigation("CartDetail");

                    b.Navigation("CertificationVariants");

                    b.Navigation("DealerProduct");

                    b.Navigation("DistributorOrderedProduct");

                    b.Navigation("EnvironmentVariants");

                    b.Navigation("GeneralVariants");

                    b.Navigation("InstallationDocumentVariants");

                    b.Navigation("NetworkVariants");

                    b.Navigation("ProductStock");

                    b.Navigation("UserManual");

                    b.Navigation("UserOrderedProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.ProductStock", b =>
                {
                    b.Navigation("DealerProduct");
                });

            modelBuilder.Entity("MaxemusAPI.Models.RewardProduct", b =>
                {
                    b.Navigation("RedeemedProducts");

                    b.Navigation("ReedemProducts");
                });

            modelBuilder.Entity("MaxemusAPI.Models.StateMaster", b =>
                {
                    b.Navigation("CityMaster");

                    b.Navigation("DistributorAddress");

                    b.Navigation("OderAddress");
                });

            modelBuilder.Entity("MaxemusAPI.Models.SubCategory", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaxemusAPI.Models.UserOrder", b =>
                {
                    b.Navigation("UserOrderedProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
